;; (print (if (- 1 1) (+ 1 1) (+ 2 2)))
;; (print (if (- 1 1) (+ 1 1)))
;; (print (if (+ 1 1) (+ 1 1)))

;; (def foo (fn [x y] (+ x y)))
;; (print (foo 1 2))
;; 'foo
;; `foo
;; ~foo
;; ~@foo
;; (print (eval '(+ 1 1)))

;; (print [1 2 3])
;; (print (list 1 2 3))
;; (print (first (list 1 2 3)))
;; (print (first '(1 2 3)))
;; (print (first [2 3 4]))
;; (print (first [3 4]))
;; (print (first 1))
;; (print (rest (list 1 2 3)))
;; (print (rest [2 3 4]))
;; (print (rest (list 1 2 3)))
;; (print (concat (list -1) '(a b) [1 2] [3 4]))

;; `foo
;; (print `(bar))
;; (def foo 123)
;; (print `~foo)
;; (print `~@foo)
;; (def a [1 2 3])
;; (print `(123 ~a))
;; (print `(123 ~@a))
;; (print `(foo ~(list 1 2 `(bar ~a))))
;; (print `(foo ~foo 123 "str" ~@a 456 ~@a))

;; (defmacro my-macro [x y] `(print ~x) `(print 2))
;; (defmacro my-macro [x])

;; (def defn (macro [s paramrint bar)
;; (bar "hello")
;; (def m (macro [x]  `(print ~x)))
;; (print m)

;; (print [1 2 (+ 1 2)])
;; (print (m (+ 1 1)))
;; (print-env 1)
;; (def foo (fn [& x] (print x)))
;; (foo 1234)
;; (def baaaaaaaaaaaaar 1)
;; (def fox (macro  [x y] `(print ~x)))
;; ;; (macro [x])
;; (print fox)
;; (fox "123")
;; (print-env)
;; (print a)
;; (m "123")


;; (def my-defn (macro [sym params & body]
;;                     `(fn ~params ~@body)))

(def defmacro (macro [sym params & body]
                     `(def ~sym (macro ~params ~@body))))

;; (def defn (macro [sym params & body]
;;                  `(def ~sym (fn ~params ~@body))))


(defmacro defn [sym params & body]
  `(def ~sym (fn ~params ~@body)))


;; (print ">>> my-defn")
;; (print my-defn)
;; (defmacro foo [x] (list 'print x))
;; (defmacro bar [y] (list 'foo y))

;; (defn fax [x y] (foo "foo") (+ x y))
;; (print (macroexpand '(bar 123)))
;; (print (macroexpand-1 '(bar 123)))
;; (print "done");


;; (def fax (fn [x y] (+ 1 2) (+ 3 4)))
;; (print (bar 6))
;; (eval
;;  '(def fax (fn [x y] (print x) (print y))))
;; (fax 1 2)
;; (def foo "foo")
;; (def bar (list 1 2 3) )
;; (print '`(list ~foo (list ~bar)))
;; (print (quasiquote (list (unquote foo)
;;                          (list (unquote bar)))))
;; (print `(list 1 2))
;; (print (quasiquote ((unquote foo) (splice-unquote bar))))
;; (def foo (list 1 2))
;; (print '`~@foo)

;; (print `~@foo)
;; (print "hello")

;; (if 1 (print 'TRUE) (print 'FALSE))
;; (defn foo [x y & z] (+ x y))
;; (def bar (foo 1))
;; (print bar)
;; (print (bar 2))
;; (1 2)
;; (try
;;   ;; (throw "oops")
;;   (print "past oops")

;;   (catch
;;     (print "in catch")
;;     (print msg))
;;   )

(defn foo [] (print "in foo") (throw "exception in foo"))
(print (try
   (print "hello")
   (print "two")
   (foo)
   ;; (throw "My error")
   (print "three")
   'try-return-value
   (print "three")
   (catch Exception foo (print foo) 'catch-return-value)
   (catch Exception msg (print msg) 'catch-return-value)
   (finally (print "finally") 'finally-return-value-is-ignored)

   ))
;; (print (throw "My error 222"))
