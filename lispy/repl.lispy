;; 1
;; (+ 1)
;; [ 1 ]
;; '(1 2 3)
;; (cons 0 '(1 2 3))
;; (first '(1 2 3))
;; (rest  '(1 2 3))
;; (list 1 2 3)
;; (concat '(1 2) '(3 4))
;; (concat '(1 2) '())
;; (concat '() '(3 4))
;; (def a "FOOOOOOOOOOOOOOOOOOo")
;; (pr a)
;; (if 1 2 3)
;; (fn [a b c] a)

;; (def a 1)
;; `(a ~@(list a))
;; (try
;;  123
;;   (throw "foo")
;;   (catch E e e)
;;   (finally (pr ":finally"))
;;   123
;;   )

;; (let [a "THIS IS A!!!!!!"
;;       ;; b 1
;;       c [1 2 3]
;;       ]
;;  'a
;;   456
;;   (let [d c]
;;    'b 'c
;;     (let [e d]
;;      'd
;;       b))
;;  123
;;   )

;; (let [] 123 d 3)


(def f (fn [a] a))
(f 123)
;; (def foo (macro [x] (list 'print x)))
;; (def bar (macro [y] (print 123) (list 'foo 345)))

;; (print (bar 123))
;; (macroexpand '(foo 123))
;; 1

