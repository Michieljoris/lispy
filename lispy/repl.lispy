(def a 1)
(def s '(1 2 ~a))
;; (print a)
;; (print `a)
;; (print (if 0 1))
;; (def f (fn [x] x))
;; (print f)
(print `(a (a ~a)))
(print (= 1 1))
(print (< 1 1))
(print (= '(1 (2 4)) '(1 (2 3))))
(print (eval '(+ 1 1)))

;; (print (eval 1))
;; (print `~@(print 1))
;; `(print a ~a (print a ~a 123))
;; (print (if 0 2 3))

;; (print (quote (+ 1 2 3 4)))

;; (print (+))
;; (print (- 4))
;; (print (/ 30 4))
;; (print (>= 3 3))
;; (lenv_print)
;; (def defmacro (macro [sym params & body]
;;                      `(def ~sym (macro ~params ~@body))))

;; (defmacro defn [sym params & body]
;;   `(def ~sym (fn ~params ~@body)))

;; (defmacro m [x] `(print ~x))
;; (m 1)

;; (def foo (fn [x] x))
;; (foo 1)

;; (load "lispy/stdlib.lispy")
;; (load "lispy/test/test_2_eval.lispy")

;; (t (+ 1 2) 3)
;; ;; (defmacro x [] [1 '(+ 1 1) 3]) (print (x))
;; (print (let [x 1] x))
;; (def foo (fn [x] x))
;; (print (foo 1))
;; (print <1 4 5>)
;; (print (pfirst < <1 2> 4 5>))
;; (print (cons 123 < <1 2> 4 5>))
;; (print (cons 123 <>))
;; (print (plist 1 2 3 4 5 ))
;; (print (prest (prest (plist   ))))
;; (def foo (fn [x]
;;            (pr "in foo")
;;            (print-env)
;;            x))
;; (def bar 123)
;; (print-env)
;; (print (foo 123))
;; (print (pfirst (prest (pconcat (plist 1 2) (plist 3 4)))))
;; ;; (print '(1 2 3))



;; (def s <1 2 3>)
;; (pr "s:")
;; (print s)
;; (def t (cons 0 s))
;; (pr "s:")
;; (print s)
;; (pr "t:")
;; (print t)
