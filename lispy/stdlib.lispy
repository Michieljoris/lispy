(def defmacro (macro [sym params & body]
                     `(def ~sym (macro ~params ~@body))))

;; (def defn (macro [sym params & body]
;;                  `(def ~sym (fn ~params ~@body))))


(defmacro defn [sym params & body]
  `(def ~sym (fn ~params ~@body)))


(def s 1)
(def params [x y])
(def body (list x y))

`(def ~s (fn ~params ~@body))

;; (defn {unpack f xs}
;;   {eval (join (list f) xs)})

;; (defn {pack f & xs}
;;   {f xs})

;; (def {uncurry} pack)

;; (def {curry} unpack)

;; (def {apply} unpack)

;; (defn {len l}
;;   {if (= l {})
;;    {0}
;;    {+ 1 (len (tail l))}})

;; (defn {reverse l} {
;;   if (= l {})
;;     {{}}
;;     {join (reverse (tail l)) (head l)}
;; })

;; (defn {when cond body}
;;   {if cond
;;    {eval body}
;;    {}})

;; (defn {test cond}
;;   {if (eval cond)
;;    {}
;;    {print cond}})

;; ;; (print "stdlib loaded")


;; (def defn
;;   (fn [args body]
;;    (def (first args)
;;     (fn (rest args) body))))

;; (defmacro defun [s params & body]
;;   `(def ~s (fn ~params ~@body)))
